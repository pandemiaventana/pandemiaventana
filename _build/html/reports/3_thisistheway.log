Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/client.py", line 560, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
capture reportediario
x = 0
### T√≠tulo y otras cosas
display(Markdown('<h2 style="font-size:60px;">REPORTE DIARIO</h2>'))
display(Markdown('<h3 style="font-size:20px;">Regi√≥n de Tarapac√°, {}</h3>'.format(data[0].last_valid_index().strftime('%d de %B de %Y'))))

### Recorremos el vector que almacena los DataFrames, uno a uno
for dataframe in data:
    
    ### Para guardar el n√∫mero del gr√°fico (un poco ordinario el m√©todo, lo s√©)
    
    x += 1
    
    ### Definimos una nueva figura
    
    fig = go.Figure(layout=layout)
    
    ### Algunos datos y t√≠tulo
    
    display(Markdown('<h3> Gr√°fico {}</h3>'.format(x)))
    display(Markdown('El gr√°fico contiene las siguientes <b>columnas</b>: '))
    
    ### Recorremos cada una de las columnas del DataFrame anterior
    
    for col in dataframe.columns:
        
        ### Vector de fechas desde primer y √∫ltimo dato v√°lido por cada columna
        
        index = dataframe[col].first_valid_index()
        index_ = dataframe[col].last_valid_index()
            
        ### DataFrame seg√∫n filtro de primer dato v√°lido
        
        _df = dataframe[index:]
            
        ### √çndice de DataFrame seg√∫n filtro anterior
            
        fecha = dataframe[index:].index
    
        ### Columna espec√≠fica
        
        _col = dataframe[index:][col]
        
        ### A√±adimos un trazado por cada columna, conectamos los valores para no tener discontinuidad y
        ### suavizamos por interpolaci√≥n spline
        
        fig.add_trace(go.Scatter(x=_df.index.strftime('%d %b %Y'),
                                 y=_col,
                    mode='lines',
                    name=col,
                    connectgaps=True,
                    line_shape='linear',
                    hovertemplate =
                    '<b>{}</b>: '.format(col) + '%{y:.2f}'+'<br><b>Fecha</b>: %{x}<br>' + "<extra></extra>"))
        
        ### Para colocar en 35¬∞ las etiquetas del eje X, con el n√∫mero de etiquetas proporcional al n√∫mero de meses
        ### desde el primer dato v√°lido
        
        fig.update_layout(xaxis = go.layout.XAxis(tickangle = 90,
                                                  nticks=len(_df.index.month.unique())))
        ### M√°s datos
        display(Markdown(' - <b>{}</b>.'.format(col)))
        display(Markdown("""El mayor valor es de <b>{}</b>, registrado el <b>{}</b>. 
        Asimismo, la mediana es de <b>{}</b>.
        Respecto a la dispersi√≥n de los datos, la desviaci√≥n est√°ndar es del <b>{}</b>. """
                         .format(dataframe[col].max(), dataframe[dataframe[col] == dataframe[col].max()].index[0].strftime('%d de %B de %Y'),
                                 round(dataframe[col].median(), 2), round(dataframe[col].std(), 2))))
        display(Markdown('> El valor en base al √∫ltimo reporte diario o epidemiol√≥gico ({}) es de <b>{}</b>.'.format(dataframe[index_:].index[0].strftime('%d de %B de %Y'), dataframe[col][index_])))
    
    ### Mostramos la figura procesada en el ciclo anterior y otros datos. A√±adimos espaciado
    display(Markdown('<h4>Visualizaci√≥n del gr√°fico {}</h4> <br> El gr√°fico, visualizado en <a href="https://plotly.com/python/">Plot.ly</a>: <br>'.format(x)))
    fig.show(config=config)
    
    display(Markdown("""> <b>Notas</b>: 
    <br> - El gr√°fico <b>inicia en el {}</b> y <b>termina el {}</b> en base a los datos disponibles.
    <br> - Para aislar una curva, presionar en el nombre o color en la leyenda. 
    <br> - Para remover una curva, seguir instrucci√≥n anterior, con la diferencia de presionar dos veces.""".format(\
                    _df.index[0].strftime('%d de %B de %Y'),
                    dataframe[index_:].index[0].strftime('%d de %B de %Y'))))
    display(Markdown('<h4>Informaci√≥n adicional sobre el gr√°fico {}</h4> <br>'.format(x)))
    display(Markdown(
    """El <b>gr√°fico {}</b> utiliz√≥ los datos procesados en <a href="https://raw.githubusercontent.com/pandemiaventana/pandemiaventana/main/out/site/csv/data{}.csv">data{}.csv</a>.
    La tabla de datos resumida:""".format(x, x, x, x)))
    display(dataframe)
------------------

[0;36m  File [0;32m"/tmp/ipykernel_3309/4026074398.py"[0;36m, line [0;32m1[0m
[0;31m    capture reportediario[0m
[0m                        ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (4026074398.py, line 1)

