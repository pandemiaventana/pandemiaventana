Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
### Graficando para reporte diario ###

### Para gr√°ficos de torta
class graphPie:
    """
    Clase para gr√°fico de torta.
    Args
    ____
    data: datos para torta
    color: colores
    path: direcci√≥n de guardado
    
    """
    def __init__(self, data, color, path):
        fig, ax = plt.subplots(figsize=(1.5, 1.5), subplot_kw=dict(aspect="equal"))
        self.data = data
        self.color = color
        def absolute_value(val):
            a = np.int(np.round(val/100*(np.array(data).sum())))
            return a
        graph = plt.pie(self.data, autopct=absolute_value, shadow=True, colors=self.color, pctdistance=0.9, textprops={'color':'w', 'fontsize': 9}, explode=[0.02, 0.02, 0.02])
        self.path = path
        plt.savefig(self.path)
        plt.show()
        print('Gr√°fico guardado.')

### Para gr√°ficos de l√≠nea
class graphLine:
    """
    Clase para gr√°fico de barra.
    Args
    ____
    x: eje x
    y: eje y
    color: colores
    path: direcci√≥n de guardado
    opt: sufijo de dato
    line: l√≠nea paralela a y, ''=True, '#'=False
    liney: valor para line
    sizelabelin: tama√±o para texto in-graph
    txth: texto, ''=True, '#'=False
    txt_str: string para txth
    txtx: x para txth
    txty: y para txth
    txts: tama√±o para txt
    
    """
    def __init__(self, x, y, color, path, opt='', line='#', liney=1, txth='#', txt_str='', txtx=1, txty=1, txts=20,
                sizelabelin=8):
        self.opt = opt
        self.s = 0
        fig, ax = plt.subplots(figsize=(4, 3))
        ax.spines['bottom'].set_color('white')
        ax.spines['left'].set_color('white')
        self.x = x
        self.y = y
        self.line = line
        self.liney = liney
        self.txth = txth
        self.txt_str = txt_str
        self.txtx = txtx
        self.txty = txty
        self.txts = txts
        self.color = color
        self.path = path
        self.sizelabelin = sizelabelin
        for x in self.x:
            graph = plt.plot(self.x[self.s], self.y[self.s], color=self.color[self.s])
            for i,j in zip(self.x[self.s],self.y[self.s]):
                ax.annotate('{}{}'.format(int(j), self.opt),xy=(i,j), color='w', size=self.sizelabelin, horizontalalignment='center', verticalalignment='bottom')
            exec('{}plt.axhline(self.liney, color="white")'.format(self.line))
            exec('{}ax.text(txtx, txty, txt_str, color="white", size=self.txts)'.format(self.txth))
            self.s += 1
        ax.tick_params(labelsize=3, colors='w', grid_color='w')
        self.path = path
        plt.savefig(self.path)
        ax.tick_params(colors='#000', grid_color='#000')
        ax.spines['bottom'].set_color('#000')
        ax.spines['left'].set_color('#000')
        plt.show()
        print('Gr√°fico guardado.')

### Primer gr√°fico: Detalle de casos nuevos
graph1 = graphPie([df['Casos nuevos con sintomas'][weekend_data], df['Casos nuevos sin sintomas'][weekend_data], df['Casos nuevos por laboratorio'][weekend_data]], \
         ['#a688f1', '#ca6e8f', '#a8ca55'], '../../in/diario/grafico/1.png')

### Segundo gr√°fico: Balance diario
graph2 = graphPie([df['Casos nuevos'][weekend_data], df['Casos recuperados nuevos'][weekend_data], df['Casos fallecidos nuevos'][weekend_data]], \
         ['#b68b41', '#43bb48', '#fe4747'], '../../in/diario/grafico/2.png')


### Tercer gr√°fico: Balance semanal
graph3 = graphLine([df[weekstart_data:weekend_data].index]*3,\
                   [df['Casos nuevos'][weekstart_data:weekend_data], df['Casos recuperados nuevos'][weekstart_data:weekend_data], df['Casos fallecidos nuevos'][weekstart_data:weekend_data]], \
                   color=['#b68b40', '#43bb47', '#fe4747'], \
                   path='../../in/diario/grafico/3.png')

### Cuarto gr√°fico: Activos semanales
graph4 = graphLine([df[weekstart_data:weekend_data].index]*2,\
                   [df['Casos activos confirmados'][weekstart_data:weekend_data], df['Casos activos probables'][weekstart_data:weekend_data]], \
                   color=['#edf01c', '#9585dc'], \
                   path='../../in/diario/grafico/4.png',)

## Quinto gr√°fico: Positividad
graph5 = graphLine([df[weekstart_data:weekend_data].index]*2,\
                   [df['Positividad diaria'][weekstart_data:weekend_data], df['Positividad media movil *'][weekstart_data:weekend_data]], \
                   color=['#f052d0', '#f5e7d0'], \
                   path='../../in/diario/grafico/5.png', opt='%')

### Sexto gr√°fico: Residencias sanitarias
graph6 = graphLine([df[weekstart_data:weekend_data].index]*2,\
                   [df['Cupos en residencias'][weekstart_data:weekend_data], df['Usuarios en residencias'][weekstart_data:weekend_data]], \
                   color=['#4c4c4c', '#1efde2'], \
                   path='../../in/diario/grafico/6.png')
    
### ¬øTodo ok?
print('\n \n Gr√°ficos del reporte diario guardados de forma exitosa.')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m/tmp/ipykernel_2906/3711567112.py[0m in [0;36m<module>[0;34m[0m
[1;32m     87[0m [0;31m### Segundo gr√°fico: Balance diario[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     88[0m graph2 = graphPie([df['Casos nuevos'][weekend_data], df['Casos recuperados nuevos'][weekend_data], df['Casos fallecidos nuevos'][weekend_data]], \
[0;32m---> 89[0;31m          ['#b68b41', '#43bb48', '#fe4747'], '../../in/diario/grafico/2.png')
[0m[1;32m     90[0m [0;34m[0m[0m
[1;32m     91[0m [0;34m[0m[0m

[0;32m/tmp/ipykernel_2906/3711567112.py[0m in [0;36m__init__[0;34m(self, data, color, path)[0m
[1;32m     19[0m             [0ma[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mint[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mround[0m[0;34m([0m[0mval[0m[0;34m/[0m[0;36m100[0m[0;34m*[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0marray[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m.[0m[0msum[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m             [0;32mreturn[0m [0ma[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 21[0;31m         [0mgraph[0m [0;34m=[0m [0mplt[0m[0;34m.[0m[0mpie[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mdata[0m[0;34m,[0m [0mautopct[0m[0;34m=[0m[0mabsolute_value[0m[0;34m,[0m [0mshadow[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mcolors[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mcolor[0m[0;34m,[0m [0mpctdistance[0m[0;34m=[0m[0;36m0.9[0m[0;34m,[0m [0mtextprops[0m[0;34m=[0m[0;34m{[0m[0;34m'color'[0m[0;34m:[0m[0;34m'w'[0m[0;34m,[0m [0;34m'fontsize'[0m[0;34m:[0m [0;36m9[0m[0;34m}[0m[0;34m,[0m [0mexplode[0m[0;34m=[0m[0;34m[[0m[0;36m0.02[0m[0;34m,[0m [0;36m0.02[0m[0;34m,[0m [0;36m0.02[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     22[0m         [0mself[0m[0;34m.[0m[0mpath[0m [0;34m=[0m [0mpath[0m[0;34m[0m[0;34m[0m[0m
[1;32m     23[0m         [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/pyplot.py[0m in [0;36mpie[0;34m(x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels, normalize, data)[0m
[1;32m   2832[0m         [0mwedgeprops[0m[0;34m=[0m[0mwedgeprops[0m[0;34m,[0m [0mtextprops[0m[0;34m=[0m[0mtextprops[0m[0;34m,[0m [0mcenter[0m[0;34m=[0m[0mcenter[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2833[0m         [0mframe[0m[0;34m=[0m[0mframe[0m[0;34m,[0m [0mrotatelabels[0m[0;34m=[0m[0mrotatelabels[0m[0;34m,[0m [0mnormalize[0m[0;34m=[0m[0mnormalize[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2834[0;31m         **({"data": data} if data is not None else {}))
[0m[1;32m   2835[0m [0;34m[0m[0m
[1;32m   2836[0m [0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1445[0m     [0;32mdef[0m [0minner[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1446[0m         [0;32mif[0m [0mdata[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1447[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0mmap[0m[0;34m([0m[0msanitize_sequence[0m[0;34m,[0m [0margs[0m[0;34m)[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1448[0m [0;34m[0m[0m
[1;32m   1449[0m         [0mbound[0m [0;34m=[0m [0mnew_sig[0m[0;34m.[0m[0mbind[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/axes/_axes.py[0m in [0;36mpie[0;34m(self, x, explode, labels, colors, autopct, pctdistance, shadow, labeldistance, startangle, radius, counterclock, wedgeprops, textprops, center, frame, rotatelabels, normalize)[0m
[1;32m   2998[0m [0;34m[0m[0m
[1;32m   2999[0m         [0;32mif[0m [0mnp[0m[0;34m.[0m[0many[0m[0;34m([0m[0mx[0m [0;34m<[0m [0;36m0[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3000[0;31m             [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m"Wedge sizes 'x' must be non negative values"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3001[0m [0;34m[0m[0m
[1;32m   3002[0m         [0msx[0m [0;34m=[0m [0mx[0m[0;34m.[0m[0msum[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mValueError[0m: Wedge sizes 'x' must be non negative values
ValueError: Wedge sizes 'x' must be non negative values

