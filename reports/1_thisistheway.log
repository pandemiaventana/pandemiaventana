Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
### Graficando para balance vacunas ###

### Ãšltimas cifras de vacunaciÃ³n a poblaciÃ³n total/objetivo
pob_total = np.array([df['Vacunados acumulados 1Â° dosis'][df['Vacunados acumulados 1Â° dosis'].last_valid_index()] + df['Vacunados acumulados unica dosis'][df['Vacunados acumulados unica dosis'].last_valid_index()], \
          df['Vacunados acumulados 2Â° dosis'][df['Vacunados acumulados 2Â° dosis'].last_valid_index()], \
          poblacion - df['Vacunados acumulados 2Â° dosis'][df['Vacunados acumulados 2Â° dosis'].last_valid_index()]])
pob_obj = np.array([df['Vacunados acumulados 1Â° dosis'][df['Vacunados acumulados 1Â° dosis'].last_valid_index()] +  + df['Vacunados acumulados unica dosis'][df['Vacunados acumulados unica dosis'].last_valid_index()], \
          df['Vacunados acumulados 2Â° dosis'][df['Vacunados acumulados 2Â° dosis'].last_valid_index()] + df['Vacunados acumulados unica dosis'][df['Vacunados acumulados unica dosis'].last_valid_index()], \
          poblacion_yomevacuno - df['Vacunados acumulados 2Â° dosis'][df['Vacunados acumulados 2Â° dosis'].last_valid_index()]])
labels = np.array(['Con 1Â° dosis \n (sin inmunidad o parcial)', 'Con cuadro completo \n (eventual inmunes)', 'Sin cuadro completo \n (sin inmunidad)'])
vacunacion_pct = pd.DataFrame([pob_total, pob_obj]).transpose()
vacunacion_pct.index = labels
vacunacion_pct.columns = ['PoblaciÃ³n total', 'PoblaciÃ³n objetivo']

### Para grÃ¡ficos de barra
class graphBar:
    """
    Clase para grÃ¡fico de barra.
    Args
    ____
    x: eje x
    y: eje y
    color: colores
    path: direcciÃ³n de guardado
    alpha: transparencia
    opt:'' sufijo de dato
    uni:0 booleano (0 para color para todas las barras, 1 para color por cada barra)
    w:4 (ancho)
    l:3 (largo)
    horizontal:0 (grÃ¡fico vertical u horizontal)
    rot: rotacion para grÃ¡fico con uni=1
    
    """
    def __init__(self, x, y, color, path, alpha, opt='', uni=0, w=4, l=3, horizontal=0, rot=0):
        self.opt = opt
        self.w = 4
        self.l = 3
        self.s = 0
        fig, ax = plt.subplots(figsize=(w, l))
        self.x = x
        self.y = y
        self.color = color
        self.alpha = alpha
        self.path = path
        self.uni = uni
        self.horizontal = 0
        self.rot = rot
        if horizontal == 0:
            if uni == True:
                for x in self.x:
                    ax.bar(self.x[self.s], self.y[self.s], color=self.color, alpha=self.alpha[self.s])
                for i,j in zip(self.x[self.s],self.y[self.s]):
                    ax.annotate('{}{}'.format(format(int(j), ',d'), self.opt),xy=(i,j), color='w', size=9, horizontalalignment='center', verticalalignment='bottom')
                self.s += 1
                plt.xticks(rotation=self.rot)
            else:
                for x in self.x:
                    ax.bar(self.x[self.s], self.y[self.s], color=self.color[self.s], alpha=self.alpha[self.s])
                    for i,j in zip(self.x[self.s],self.y[self.s]):
                        ax.annotate('{}{}'.format(format(int(j), ',d'), self.opt),xy=(i,j), color='w', size=4.5, horizontalalignment='center', verticalalignment='bottom')
                    self.s += 1
                    plt.xticks(rotation=15)
        else:
            for x in self.x:
                ax.barh(width=self.x[self.s], y=self.y[self.s], color=self.color[self.s], alpha=self.alpha[self.s])
                ax.axis('off')
                fig.patch.set_visible(True)
                self.s += 1
        ax.tick_params(labelsize=5, colors='w', grid_color='w')
        ax.get_yaxis().set_major_formatter(
        mpl.ticker.FuncFormatter(lambda y, p: format(int(y), ',d')))
        self.path = path
        ax.spines['bottom'].set_color('white')
        ax.spines['left'].set_color('white')
        plt.savefig(self.path, bbox_inches = 'tight')
        ax.tick_params(colors='#000', grid_color='#000')
        ax.spines['bottom'].set_color('#000')
        ax.spines['left'].set_color('#000')
        plt.show()
        print('GrÃ¡fico guardado.')
        
### Primer grÃ¡fico: ProporciÃ³n objetivo vacunada
graph1 = graphBar([[100], [int(procesovacunacion_hoy)]],\
                   [[0], [0]], \
                   color=['gray', '#9ad5ff'], alpha=[1, 1], \
                   path='../../in/vacuna/grafico/1.png', uni=1, w=1.68, l=0.6, horizontal=1)
vaccine = Image.open(requests.get('https://raw.githubusercontent.com/pandemiaventana/pandemiaventana/main/in/vacuna/grafico/vaccine.png', stream=True).raw).rotate(-90)
pct_ = Image.open('../../in/vacuna/grafico/1.png')
background = Image.new('RGBA', (1000, 1000), (0, 0, 0, 0))
background.paste(pct_, (135,359), pct_)
background.paste(vaccine, (0, 0), vaccine)
background = background.rotate(90).resize((400, 700), Image.ANTIALIAS)
background.save('../../in/vacuna/grafico/1.png')

### Segundo grÃ¡fico: Vacunas administradas (1Â° dosis)
graph2 = graphBar([vacunacion_pct.index],\
                   [vacunacion_pct['PoblaciÃ³n total']], \
                   color=['#8899e1', '#9ad5ff', 'gray'], alpha=[1], \
                   path='../../in/vacuna/grafico/2.png', uni=1, w=3.5, l=2.5)
        
### Tercer grÃ¡fico: Vacunas administradas (1Â° dosis)
graph3 = graphBar([vacunacion_pct.index],\
                   [vacunacion_pct['PoblaciÃ³n objetivo']], \
                   color=['#8899e1', '#9ad5ff', 'gray'], alpha=[1], \
                   path='../../in/vacuna/grafico/3.png', uni=1, w=3.5, l=2.5)
        
### Cuarto grÃ¡fico: Vacunas administradas (1Â° dosis)
graph4 = graphBar([vacunacion_etaria.index]*2,\
                   [vacunacion_etaria['Poblacion'], vacunacion_etaria['1Â° Dosis'] + vacunacion_etaria['Unica dosis'], \
                   color=['gray', '#8899e1'], alpha=[0.9, 0.9], w=3.5, l=2.5, \
                   path='../../in/vacuna/grafico/4.png')

### Quinto grÃ¡fico: Vacunas administradas (2Â° dosis)
graph5 = graphBar([vacunacion_etaria.index]*2,\
                   [vacunacion_etaria['Poblacion'], vacunacion_etaria['2Â° Dosis']], \
                   color=['gray', '#9ad5ff'], alpha=[0.9, 0.9], w=3.5, l=2.5, \
                   path='../../in/vacuna/grafico/5.png')

### Â¿Todo ok?
print('\n \n GrÃ¡ficos del balance de vacunas guardados de forma exitosa.')
------------------

[0;36m  File [0;32m"/tmp/ipykernel_3021/3894292057.py"[0;36m, line [0;32m110[0m
[0;31m    color=['gray', '#8899e1'], alpha=[0.9, 0.9], w=3.5, l=2.5, \[0m
[0m         ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (3894292057.py, line 110)

